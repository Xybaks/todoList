{"version":3,"sources":["state/tasks-reducer.ts","state/todolists-reducer.ts","state/store/store.ts","serviceWorker.ts","AddItemForm.tsx","EbitableSpan.tsx","TodoList.tsx","AppWithRedux.tsx","index.tsx"],"names":["initialState","rootReducer","combineReducers","tasks","state","action","type","copyState","todoListId","filter","task","id","taskId","v1","title","isDone","map","newState","todoLists","tl","newTodoList","store","createStore","window","Boolean","location","hostname","match","AddItemForm","props","useState","setTitle","error","setError","addItem","itemTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","label","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","TodoList","style","textAlign","changeDodoListTitle","size","removeDodoList","Delete","addTask","marginTop","Button","margin","changeFilter","listStyle","padding","className","Checkbox","changeTaskStatus","checked","changeTaskTitle","removeTask","AppWithRedux","useSelector","dispatch","useDispatch","todoListID","TodoListTitle","taskID","filterValue","AddTaskAC","ChangeTaskStatusTypeAC","ChangeTaskTitleTypeAC","AppBar","position","Toolbar","display","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","background","borderRadius","AddTodoListAC","spacing","tasksForTodoList","filterTasksForTodoList","t","getTasksForTodoList","item","Paper","elevation","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.793c1427.chunk.js","sourcesContent":["import {TasksStateType} from \"../App\";\nimport {v1} from \"uuid\";\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./todolists-reducer\";\n\ntype RemoveTaskActionType = {\n    type: 'REMOVE-TASK'\n    taskId: string,\n    todoListId: string\n}\ntype AddTaskActionType = {\n    type: 'ADD-TASK'\n    title: string\n    todoListId: string\n}\n\ntype ChangeTaskStatusType = {\n    type: 'CHANGE-TASK-STATUS'\n    todoListId: string\n    taskId: string,\n    isDone: boolean\n}\n\n\ntype ChangeTaskTitleType = {\n    type: 'CHANGE-TASK-TITLE'\n    todoListId: string\n    taskId: string,\n    title: string\n}\nexport type ActionType = RemoveTaskActionType\n    | AddTaskActionType\n    | ChangeTaskStatusType\n    | ChangeTaskTitleType\n    | AddTodoListActionType\n|RemoveTodoListActionType\nconst initialState :TasksStateType={}\n\nexport function tasksReducer(state=initialState, action: ActionType): TasksStateType {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            let copyState = {...state}\n            copyState[action.todoListId] = copyState[action.todoListId].filter(task => task.id !== action.taskId)\n            return copyState\n        }\n        case 'ADD-TASK': {\n            let copyState = {...state}\n            copyState[action.todoListId] = [\n                {id: v1(), title: action.title, isDone: false},\n                ...copyState[action.todoListId]]\n            return copyState\n\n        }\n        case 'CHANGE-TASK-STATUS':\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(task => {\n                        if (task.id === action.taskId)\n                            return {...task, isDone: action.isDone}\n                        else return task\n                    }\n                )\n            }\n\n        case 'CHANGE-TASK-TITLE':\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(task => {\n                        if (task.id === action.taskId)\n                            return {...task, title: action.title}\n                        else return task\n                    }\n                )\n            }\n\n        case 'ADD-TODOLIST':\n            return {\n                ...state,\n                [action.todoListId]: []\n            }\n\n        case 'REMOVE-TODOLIST': {\n            let newState = {...state}\n            delete newState[action.id]\n            return newState\n        }\n                default:\n            return state\n    }\n}\n\n//\n// case 'CHANGE-TODOLIST-TITLE': {\n//     const todoLists = state.map(tl => {\n//         if (tl.id === action.id) {\n//             return {...tl, title: action.title};\n//         }\n//         return tl;\n//     })\n//     return state;\n\nexport const RemoveTaskAC = (todoListId: string, taskId: string): RemoveTaskActionType => {\n    return {\n        type: 'REMOVE-TASK',\n        taskId, // можно писать  так, из-за совпадения имен taskId=action.taskId\n        todoListId // можно писать  так, из-за совпадения имен todoListId=action.todoListId\n    }\n}\n//\nexport const AddTaskAC = (title: string, todoListId: string): AddTaskActionType => {\n    return {type: \"ADD-TASK\", title, todoListId}\n}\n\nexport const ChangeTaskStatusTypeAC = (todoListId: string, taskId: string, isDone: boolean): ChangeTaskStatusType => {\n    return {type: 'CHANGE-TASK-STATUS', todoListId, taskId, isDone}\n}\n\nexport const ChangeTaskTitleTypeAC = (todoListId: string, taskId: string, title: string): ChangeTaskTitleType => {\n    return {type: 'CHANGE-TASK-TITLE', todoListId, taskId, title}\n}","import {FilterValuesType, TodoListType} from \"../App\";\nimport {v1} from \"uuid\";\n\nexport type RemoveTodoListActionType = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\nexport type AddTodoListActionType = {\n    type: 'ADD-TODOLIST'\n    title: string\n    todoListId:string;\n}\ntype ChangeTodoListTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    id: string\n    title: string\n}\ntype ChangeTodoListFilterActionType = {\n    type: 'CHANGE-TODOLIST-FILTER'\n    id: string\n    filter: FilterValuesType\n}\n\nexport type ActionType = RemoveTodoListActionType | AddTodoListActionType | ChangeTodoListTitleActionType |\n    ChangeTodoListFilterActionType\n\n\nconst initialState :Array<TodoListType>=[]\n\nexport function todoListsReducer(state=initialState, action: ActionType) {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id !== action.id)\n        case 'ADD-TODOLIST':\n            const newTodoList: TodoListType = {\n                id:action.todoListId  ,\n                title: action.title,\n                filter: \"all\"\n            }\n            return [newTodoList, ...state]\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todoLists = state.map(tl => {\n                if (tl.id === action.id) {\n                    return {...tl, title: action.title};\n                }\n                return tl;\n            })\n            return todoLists;\n        }\n        case 'CHANGE-TODOLIST-FILTER': {\n            return state.map(tl => {\n                if (tl.id === action.id) {\n                    return {...tl, filter: action.filter};\n                }\n                return tl;\n            });\n        }\n        default:\n            return state;\n    }\n}\n\nexport const RemoveTodoListAC = (todolistId: string): RemoveTodoListActionType => {\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\n}\n\nexport const AddTodoListAC = (title: string): AddTodoListActionType => {\n    return {type: \"ADD-TODOLIST\", title: title,todoListId:v1()}\n}\n\nexport const ChangeTodoListTitleAC = (todolistId: string, newTitle: string): ChangeTodoListTitleActionType => {\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: todolistId, title: newTitle}\n}\n\nexport const ChangeTodoListFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodoListFilterActionType => {\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: todolistId, filter: filter}\n}\n","\r\n\r\nimport {tasksReducer} from '../tasks-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\nimport {todoListsReducer} from \"../todolists-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null) // очистка при начинании набора имени\r\n    }\r\n    // функция реагирования на    нажатие клавиши Ентер для окончания ввода данных в поле ввода input\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") addItem()\r\n    }\r\n    const addItem = () => {\r\n        const itemTitle = title.trim() //  обрезание пробелов по краям текста\r\n        if (itemTitle) {   // если не пустая строка () интерпритируется как  false, то->\r\n            props.addItem(itemTitle) //  вызов функции props.addTask для создания таски у родительской компоненты\r\n        } else {\r\n            setError(\"Title is required \")\r\n        }\r\n        setTitle(\"\")   //  очистка имени после создания title\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*замена импуту: */}\r\n            <TextField\r\n                // обводка\r\n                 variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error} // превращение ошибки стринг в булевое значение с тру в фолс, второй ! возвращает тру\r\n                helperText={error}\r\n                label={\"Title\"}\r\n            />\r\n            {/*Button из библиотеки берем @material-ui/core*/}\r\n            <IconButton\r\n                color=\"primary\"\r\n                onClick={addItem}><AddBox/> </IconButton>\r\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle:(newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                value={title}\r\n                onChange={changeTitle}/>\r\n\r\n            : <span onDoubleClick={onEditMode}> {title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EbitableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport { Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeDodoList: (todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeDodoListTitle: (TodoListTitle: string,todoListID: string ) => void\r\n    changeFilter: (filterValue: FilterValuesType, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n\r\n}\r\n\r\nexport function TodoList(props: TodoListsType) {\r\n    //3 функции изменения отображаемых тасок\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\n//функция удаления тудулиста\r\n    const removeDodoList = () => {\r\n        props.removeDodoList(props.id)\r\n    }\r\n//функция добавления тудулиста\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n     const changeTaskStatus = (title:string)=>{\r\n         props.changeDodoListTitle(title,props.id)\r\n     }\r\n\r\n    return (\r\n        <div>\r\n        <h3 style={{textAlign:\"center\"}}><EditableSpan title={props.title} changeTitle={changeTaskStatus}/>\r\n            <IconButton size=\"small\" onClick={removeDodoList}><Delete color=\"secondary\"/></IconButton>\r\n        </h3>\r\n        <AddItemForm\r\n            addItem={addTask}\r\n        />\r\n            <div style={{marginTop:\"10px\"}}>\r\n                <Button\r\n                    // className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                    style={{margin:\"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"all\" ?\"contained\":\"outlined\"}\r\n                    color={props.filter === \"all\" ?\"secondary\":\"primary\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    // className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                    style={{margin:\"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"active\" ?\"contained\":\"outlined\"}\r\n                    color={props.filter === \"active\" ?\"secondary\":\"primary\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    // className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    style={{margin:\"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"completed\" ?\"contained\":\"outlined\"}\r\n                    color={props.filter === \"completed\" ?\"secondary\":\"primary\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        <ul style={{listStyle:\"none\",padding:\"0\"}}>{\r\n            props.tasks.map(task => {\r\n                //  функции реагирования для изменения статуса, удаления тасок, изменения имени таски :\r\n                const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n                }\r\n\r\n                const removeTask = () => {\r\n                    props.removeTask(task.id, props.id)\r\n                }\r\n\r\n                const changeTaskTitle = (title: string) => {\r\n                    props.changeTaskTitle(task.id, title, props.id)\r\n                }\r\n\r\n                return (\r\n                    <li key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox onChange={changeTaskStatus}\r\n                        checked={task.isDone}\r\n                    />\r\n\r\n                        <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>\r\n                        <IconButton size=\"small\" onClick={removeTask}><Delete color=\"primary\"/></IconButton>\r\n                    </li>\r\n                )\r\n            })\r\n        }\r\n\r\n        </ul>\r\n\r\n    </div>);\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleAC,\r\n    RemoveTodoListAC,\r\n} from \"./state/todolists-reducer\";\r\nimport {\r\n    AddTaskAC,\r\n    ChangeTaskStatusTypeAC,\r\n    ChangeTaskTitleTypeAC,\r\n    RemoveTaskAC,\r\n} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store/store\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n//\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n//BLL\r\n//\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    // список задач c  ключами по todoListID, к ним хук useState,  замена данных по вызову функции setTasks\r\n\r\n    function addTodoList(title: string) {\r\n        dispatch(AddTodoListAC(title))\r\n    }\r\n\r\n    function removeDodoList(todoListID: string) {\r\n        dispatch(RemoveTodoListAC(todoListID))\r\n    }\r\n\r\n    function changeDodoListTitle(TodoListTitle: string, todoListID: string) {\r\n        dispatch(ChangeTodoListTitleAC(TodoListTitle, todoListID))\r\n    }\r\n\r\n// функция удаления задачи\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        dispatch(RemoveTaskAC(todoListID, taskID))\r\n    }\r\n\r\n//  смена фильтра по переданному значению\r\n    function changeFilter(filterValue: FilterValuesType, todoListID: string) {\r\n        dispatch(ChangeTodoListFilterAC(todoListID, filterValue))\r\n    }\r\n\r\n    // добавление новой  task  по заданному названию title  и ID тудулиста с последующим обновлением tasks через setTasks и UseState\r\n    function addTask(title: string, todoListID: string) {\r\n        dispatch(AddTaskAC(title, todoListID))\r\n    }\r\n\r\n    // function changeTaskStatus - Смена на противоположный параметр isDone для опеделеной task,\r\n    function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        dispatch(ChangeTaskStatusTypeAC(todoListID, taskID, isDone))\r\n    }\r\n\r\n    // функция смены имени тасок\r\n    function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n        dispatch(ChangeTaskTitleTypeAC(todoListID, taskID, title))\r\n    }\r\n\r\n    //фильтрация отображения тасок  с передачей на вводе параметра фильтрации и ID todoList\r\n    function getTasksForTodoList(filterValue: FilterValuesType, todoListID: string) {\r\n        let filterTasksForTodoList = tasks[todoListID]\r\n        if (filterValue === \"active\") {\r\n            filterTasksForTodoList = tasks[todoListID].filter(t => t.isDone === false)\r\n        }\r\n        if (filterValue === \"completed\") {\r\n            filterTasksForTodoList = tasks[todoListID].filter(t => t.isDone === true)\r\n        }\r\n        return filterTasksForTodoList;\r\n\r\n    }\r\n\r\n\r\n    //UI\r\n    return (\r\n        <div className=\"App\">\r\n            {/*AppBar комопнента @material-ui - гогтовый Header*/}\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{display: \"flex\", justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Typography variant=\"h6\" style={{margin: \"20px\"}}>\r\n                            News\r\n                        </Typography>\r\n                        <Typography variant=\"h6\" style={{margin: \"20px\"}}>\r\n                            About\r\n                        </Typography>\r\n                    </div>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"10px\", background: \"greenyellow\", borderRadius: \"10px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n                            let tasksForTodoList = getTasksForTodoList(tl.filter, tl.id)\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper elevation={10} style={{\r\n                                        margin: \"10px\",\r\n                                        padding: \"30px\",\r\n                                        background: \"lightskyblue\",\r\n                                        borderRadius: \"10px\"\r\n                                    }}>\r\n                                        <TodoList\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            filter={tl.filter}\r\n                                            tasks={tasksForTodoList}\r\n                                            addTask={addTask}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            changeTaskStatus={changeTaskStatus}\r\n                                            removeDodoList={removeDodoList}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeDodoListTitle={changeDodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    )\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {store} from './state/store/store';\r\nimport {Provider} from 'react-redux';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux />\r\n    </Provider>,  document.getElementById('root')\r\n\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}