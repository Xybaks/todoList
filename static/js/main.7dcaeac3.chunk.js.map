{"version":3,"sources":["AddItemForm.tsx","EbitableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","itemTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","label","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","TodoList","style","textAlign","changeDodoListTitle","id","size","removeDodoList","Delete","addTask","marginTop","Button","margin","filter","changeFilter","listStyle","padding","tasks","map","task","className","isDone","Checkbox","changeTaskStatus","checked","changeTaskTitle","removeTask","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","taskID","todoListID","todolistTasks","filterValue","todolist","find","tl","newTask","t","TodoListTitle","todoList","AppBar","position","Toolbar","display","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","background","borderRadius","newTodoListId","spacing","tasksForTodoList","filterTasksForTodoList","getTasksForTodoList","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7dcaeac3.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null) // очистка при начинании набора имени\r\n    }\r\n    // функция реагирования на    нажатие клавиши Ентер для окончания ввода данных в поле ввода input\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") addItem()\r\n    }\r\n    const addItem = () => {\r\n        const itemTitle = title.trim() //  обрезание пробелов по краям текста\r\n        if (itemTitle) {   // если не пустая строка () интерпритируется как  false, то->\r\n            props.addItem(itemTitle) //  вызов функции props.addTask для создания таски у родительской компоненты\r\n        } else {\r\n            setError(\"Title is required \")\r\n        }\r\n        setTitle(\"\")   //  очистка имени после создания title\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*замена импуту: */}\r\n            <TextField\r\n                // обводка\r\n                 variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error} // превращение ошибки стринг в булевое значение с тру в фолс, второй ! возвращает тру\r\n                helperText={error}\r\n                label={\"Title\"}\r\n            />\r\n            {/*Button из библиотеки берем @material-ui/core*/}\r\n            <IconButton\r\n                color=\"primary\"\r\n                onClick={addItem}><AddBox/> </IconButton>\r\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle:(newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                value={title}\r\n                onChange={changeTitle}/>\r\n\r\n            : <span onDoubleClick={onEditMode}> {title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EbitableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport { Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeDodoList: (todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeDodoListTitle: (TodoListTitle: string,todoListID: string ) => void\r\n    changeFilter: (filterValue: FilterValuesType, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n\r\n}\r\n\r\nexport function TodoList(props: TodoListsType) {\r\n    //3 функции изменения отображаемых тасок\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\n//функция удаления тудулиста\r\n    const removeDodoList = () => {\r\n        props.removeDodoList(props.id)\r\n    }\r\n//функция добавления тудулиста\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n     const changeTaskStatus = (title:string)=>{\r\n         props.changeDodoListTitle(title,props.id)\r\n     }\r\n\r\n    return (\r\n        <div>\r\n        <h3 style={{textAlign:\"center\"}}><EditableSpan title={props.title} changeTitle={changeTaskStatus}/>\r\n            <IconButton size=\"small\" onClick={removeDodoList}><Delete color=\"secondary\"/></IconButton>\r\n        </h3>\r\n        <AddItemForm\r\n            addItem={addTask}\r\n        />\r\n            <div style={{marginTop:\"10px\"}}>\r\n                <Button\r\n                    // className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                    style={{margin:\"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"all\" ?\"contained\":\"outlined\"}\r\n                    color={props.filter === \"all\" ?\"secondary\":\"primary\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    // className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                    style={{margin:\"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"active\" ?\"contained\":\"outlined\"}\r\n                    color={props.filter === \"active\" ?\"secondary\":\"primary\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    // className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    style={{margin:\"3px\"}}\r\n                    size={\"small\"}\r\n                    variant={props.filter === \"completed\" ?\"contained\":\"outlined\"}\r\n                    color={props.filter === \"completed\" ?\"secondary\":\"primary\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        <ul style={{listStyle:\"none\",padding:\"0\"}}>{\r\n            props.tasks.map(task => {\r\n                //  функции реагирования для изменения статуса, удаления тасок, изменения имени таски :\r\n                const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n                }\r\n\r\n                const removeTask = () => {\r\n                    props.removeTask(task.id, props.id)\r\n                }\r\n\r\n                const changeTaskTitle = (title: string) => {\r\n                    props.changeTaskTitle(task.id, title, props.id)\r\n                }\r\n\r\n                return (\r\n                    <li key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox onChange={changeTaskStatus}\r\n                        checked={task.isDone}\r\n                    />\r\n\r\n                        <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>\r\n                        <IconButton size=\"small\" onClick={removeTask}><Delete color=\"primary\"/></IconButton>\r\n                    </li>\r\n                )\r\n            })\r\n        }\r\n\r\n        </ul>\r\n\r\n    </div>);\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n//\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n//BLL\r\n//\r\n    const todoListID1 = v1()\r\n    const todoListID2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID2, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n\r\n    // список задач c  ключами по todoListID, к ним хук useState,  замена данных по вызову функции setTasks\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"AAA\", isDone: false},\r\n            {id: v1(), title: \"BBB\", isDone: true},\r\n            {id: v1(), title: \"CCC\", isDone: false},\r\n            {id: v1(), title: \"QQQ\", isDone: false},\r\n        ],\r\n        [todoListID2]:\r\n            [\r\n                {id: v1(), title: \"III\", isDone: true},\r\n                {id: v1(), title: \"EEE\", isDone: false},\r\n                {id: v1(), title: \"FFF\", isDone: true}\r\n            ]\r\n    })\r\n\r\n    function addTodoList(title: string) {\r\n        let newTodoListId = v1()\r\n        let newTodoList: TodoListType = {id: newTodoListId, title: title, filter: \"all\"}\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodoListId]: []\r\n        })\r\n    }\r\n\r\n// функция удаления задачи по её ID и ID тудулиста c последующим вызовом в setTasks нового массива для перерисовки  массива tasks\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        const todolistTasks = tasks[todoListID]\r\n        tasks[todoListID] = todolistTasks.filter(task => task.id !== taskID)\r\n        setTasks({...tasks})\r\n        //  переменную можно сократить\r\n        // tasks[todoListID] = todolistTasks[todoListID].filter(task => task.id !== taskID)\r\n        // setTasks({...tasks})\r\n    }\r\n\r\n//  смена фильтра по переданному значению\r\n    function changeFilter(filterValue: FilterValuesType, todoListID: string) {\r\n        const todolist = todoLists.find(tl => tl.id === todoListID)\r\n        if (todolist) {\r\n            todolist.filter = filterValue\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    // добавление новой  task  по заданному названию title  и ID тудулиста с последующим обновлением tasks через setTasks и UseState\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    // function changeTaskStatus - Смена на противоположный параметр isDone для опеделеной task,\r\n    //   находя по taskID в массиве tasks,  затем смотрим, есть ли task\r\n    function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        const task = tasks[todoListID].find(t => t.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    //фильтрация отображения тасок  с передачей на вводе параметра фильтрации и ID todoList\r\n    function getTasksForTodoList(filterValue: FilterValuesType, todoListID: string) {\r\n        let filterTasksForTodoList = tasks[todoListID]\r\n        if (filterValue === \"active\") {\r\n            filterTasksForTodoList = tasks[todoListID].filter(t => t.isDone === false)\r\n        }\r\n        if (filterValue === \"completed\") {\r\n            filterTasksForTodoList = tasks[todoListID].filter(t => t.isDone === true)\r\n        }\r\n        return filterTasksForTodoList;\r\n    }\r\n\r\n    // функция смены имени тасок\r\n    function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n        const task = tasks[todoListID].find(t => t.id === taskID)\r\n        if (task) {\r\n            task.title = title\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    //  функция удаления тудулиста\r\n    function removeDodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    // функция изменения имени тудулиста\r\n    function changeDodoListTitle(TodoListTitle: string, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.title = TodoListTitle\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    //UI\r\n    return (\r\n        <div className=\"App\">\r\n            {/*AppBar комопнента @material-ui - гогтовый Header*/}\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{display:\"flex\",justifyContent:\"space-between\"}}>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                    <div style={{display:\"flex\"}}>\r\n                        <Typography variant=\"h6\" style={{margin:\"20px\"}} >\r\n                            News\r\n                        </Typography>\r\n                    <Typography variant=\"h6\" style={{margin:\"20px\"}}>\r\n                        About\r\n                    </Typography>\r\n                    </div>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"10px\", background: \"greenyellow\", borderRadius: \"10px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n                            let tasksForTodoList = getTasksForTodoList(tl.filter, tl.id)\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper elevation={10} style={{\r\n                                        margin: \"10px\",\r\n                                        padding: \"30px\",\r\n                                        background: \"lightskyblue\",\r\n                                        borderRadius: \"10px\"\r\n                                    }}>\r\n                                        <TodoList\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            filter={tl.filter}\r\n                                            tasks={tasksForTodoList}\r\n                                            addTask={addTask}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            changeTaskStatus={changeTaskStatus}\r\n                                            removeDodoList={removeDodoList}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeDodoListTitle={changeDodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    )\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}